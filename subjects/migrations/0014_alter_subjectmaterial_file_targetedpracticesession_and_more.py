# Generated by Django 5.2.1 on 2025-08-09 18:49

import django.core.validators
import django.db.models.deletion
import storages.backends.s3
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('subjects', '0013_quiz_material'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='subjectmaterial',
            name='file',
            field=models.FileField(storage=storages.backends.s3.S3Storage(), upload_to='subject_materials/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'docx', 'doc', 'mp4', 'mov', 'avi', 'mp3', 'wav', 'm4a'])]),
        ),
        migrations.CreateModel(
            name='TargetedPracticeSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="e.g., 'Practice: Algebra & Calculus Weaknesses'", max_length=255)),
                ('target_concepts', models.JSONField(help_text='List of concepts this session targets')),
                ('questions', models.JSONField(help_text='AI-generated questions for targeted practice')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('total_questions', models.IntegerField(default=0)),
                ('correct_answers', models.IntegerField(default=0)),
                ('completion_time', models.DurationField(blank=True, null=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targeted_sessions', to='subjects.subject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targeted_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WeaknessPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concept', models.CharField(help_text='The concept/topic where user shows weakness', max_length=255)),
                ('incorrect_count', models.IntegerField(default=0, help_text='Number of incorrect answers for this concept')),
                ('total_attempts', models.IntegerField(default=0, help_text='Total attempts for this concept')),
                ('last_failure', models.DateTimeField(help_text='When the user last got this concept wrong')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weakness_patterns', to='subjects.subject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weakness_patterns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-incorrect_count', '-last_failure'],
            },
        ),
        migrations.CreateModel(
            name='TargetedPracticeAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_index', models.IntegerField(help_text='Index of question in session.questions')),
                ('user_answer', models.TextField(help_text="User's actual answer text")),
                ('is_correct', models.BooleanField(default=False)),
                ('concept', models.CharField(help_text='Concept this question was testing', max_length=255)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='subjects.targetedpracticesession')),
                ('weakness_pattern', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='practice_attempts', to='subjects.weaknesspattern')),
            ],
            options={
                'ordering': ['question_index'],
            },
        ),
        migrations.AddIndex(
            model_name='targetedpracticesession',
            index=models.Index(fields=['user', 'subject'], name='subjects_ta_user_id_e85741_idx'),
        ),
        migrations.AddIndex(
            model_name='targetedpracticesession',
            index=models.Index(fields=['is_completed'], name='subjects_ta_is_comp_543476_idx'),
        ),
        migrations.AddIndex(
            model_name='weaknesspattern',
            index=models.Index(fields=['user', 'subject'], name='subjects_we_user_id_681576_idx'),
        ),
        migrations.AddIndex(
            model_name='weaknesspattern',
            index=models.Index(fields=['incorrect_count'], name='subjects_we_incorre_897725_idx'),
        ),
        migrations.AddIndex(
            model_name='weaknesspattern',
            index=models.Index(fields=['last_failure'], name='subjects_we_last_fa_7a6f32_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='weaknesspattern',
            unique_together={('user', 'subject', 'concept')},
        ),
        migrations.AlterUniqueTogether(
            name='targetedpracticeattempt',
            unique_together={('session', 'question_index')},
        ),
    ]

# XP Chatbot - Subject-Specific RAG Assistant PRD

## Project Overview
Develop "XP" - an intelligent chatbot assistant embedded on each subject's detail page that uses retrieval-augmented generation (RAG) to help users discuss and understand their uploaded subject materials through natural conversation.

## Context & Existing Infrastructure
Career Nexus already has strong AI foundations:
- OpenAI integration (GPT-3.5-turbo) via subjects/llm_utils.py
- ContentChunk model with embedding_vector field for storing embeddings  
- Sentence transformers (all-MiniLM-L6-v2) for embedding generation
- Celery background processing for AI tasks
- Basic answer_question function already implemented
- Subject and SubjectMaterial models with proper user isolation

## Core Requirements

### 1. User Interface Requirements
- **Placement**: Bottom-right corner chat bubble on individual subject detail pages only
- **Design**: Modern chat interface similar to customer support chat widgets
- **States**: Collapsed bubble → Expanded chat panel → Full conversation view
- **Title**: "Chat with XP" when expanded
- **Responsive**: Works on desktop and mobile devices

### 2. Chat Functionality Requirements
- **Scope Limitation**: XP only answers questions based on materials uploaded to the current subject
- **No Hallucinations**: If asked about topics outside subject materials, responds: "I can only help with the materials uploaded under this subject. Try asking something related to them."
- **Context Awareness**: XP should understand and reference specific materials when relevant
- **Conversation Flow**: Supports natural back-and-forth conversation within subject scope

### 3. RAG Pipeline Requirements
- **Vector Search**: Use existing embedding infrastructure (ContentChunk.embedding_vector)
- **Retrieval**: Find relevant chunks based on semantic similarity to user query
- **Context Assembly**: Provide retrieved chunks as context to OpenAI API
- **Response Generation**: Generate responses using existing OpenAI integration
- **Relevance Filtering**: Only use chunks above similarity threshold

### 4. Memory & Persistence Requirements
- **Session Storage**: Persist chat history per user-subject pair in database
- **Conversation Continuity**: Users can return and continue previous conversations
- **Context Preservation**: XP remembers previous chat context within the session
- **User Isolation**: Each user only sees their own chat history for their subjects

### 5. Security & Access Requirements
- **Authentication**: Only logged-in users can access XP
- **Data Isolation**: Users can only chat about their own subject materials
- **Subject Scope**: XP only accesses materials belonging to the current subject
- **No Cross-Contamination**: No data leakage between users or subjects

### 6. Embedding Integration Requirements
- **Automatic Processing**: Generate embeddings when materials are uploaded to subjects
- **Update Pipeline**: Update embeddings when materials are modified or deleted
- **Vector Storage**: Store embeddings in existing ContentChunk.embedding_vector field
- **Search Optimization**: Efficient similarity search across subject's material chunks

## Technical Specifications

### Backend Components
1. **Chat Models**: New Django models for storing chat sessions and messages
2. **Chat API**: REST endpoints for sending messages and retrieving chat history
3. **RAG Service**: Enhanced vector search and context retrieval service
4. **Embedding Pipeline**: Background tasks for generating/updating embeddings
5. **Chat Views**: API views with proper authentication and authorization

### Frontend Components
1. **Chat Widget**: React/JavaScript component for chat interface
2. **Message Components**: Separate components for user and XP messages
3. **Chat State Management**: Handle conversation state and API interactions
4. **UI Integration**: Seamless integration with existing subject detail template

### Data Models
1. **ChatSession**: Links user + subject, stores session metadata
2. **ChatMessage**: Individual messages with role (user/assistant) and content
3. **Enhanced ContentChunk**: Leverage existing embedding_vector field

## Integration Points

### Existing Infrastructure to Leverage
- **OpenAI Client**: Use existing client setup in subjects/llm_utils.py
- **Embeddings**: Enhance existing sentence transformer usage in subjects/tasks.py  
- **Content Processing**: Build on existing material processing pipeline
- **User Authentication**: Use existing Django auth system
- **Subject Models**: Build on existing Subject and SubjectMaterial models

### New Components Required
- Chat session management system
- Vector similarity search functionality
- Real-time chat API endpoints
- Frontend chat widget interface
- Enhanced RAG retrieval pipeline

## Success Criteria

### MVP (Minimum Viable Product)
1. Chat widget appears on subject detail pages
2. Users can send messages and receive AI responses
3. XP responds using only subject-specific materials
4. Basic conversation history persistence
5. Proper user and subject isolation

### Enhanced Features
1. Improved conversation context understanding
2. Material citations in responses (e.g., "According to your uploaded PDF...")
3. Suggested follow-up questions
4. Chat export functionality
5. Advanced conversation search

## Technical Constraints
- Leverage existing OpenAI API integration (GPT-3.5-turbo)
- Use existing embedding model (all-MiniLM-L6-v2) for consistency
- Maintain user data isolation and security
- Build on existing Celery background processing
- Integrate with existing Django REST framework setup

## Out of Scope
- Global chatbot access (XP is subject-specific only)
- Direct file uploads to XP chat interface
- Model fine-tuning (RAG approach only)
- Cross-subject material search
- Admin or instructor oversight features (user-focused only)

## Implementation Approach
1. **Phase 1**: Backend RAG pipeline and chat API
2. **Phase 2**: Frontend chat widget and basic UI
3. **Phase 3**: Chat persistence and session management  
4. **Phase 4**: Enhanced UX and conversation features
5. **Phase 5**: Performance optimization and polish 
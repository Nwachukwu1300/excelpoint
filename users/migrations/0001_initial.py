# Generated by Django 5.2.1 on 2025-06-01 20:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('current_role', models.CharField(blank=True, help_text="User's current job position", max_length=100)),
                ('experience_level', models.CharField(choices=[('entry', 'Entry Level'), ('mid', 'Mid Level'), ('senior', 'Senior Level')], default='entry', help_text="User's current experience level", max_length=20)),
                ('bio', models.TextField(blank=True, help_text='Professional summary and background')),
                ('linkedin_profile', models.URLField(blank=True)),
                ('github_profile', models.URLField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Achievement title', max_length=200)),
                ('type', models.CharField(choices=[('award', 'Award'), ('scholarship', 'Scholarship'), ('honor', 'Honor/Recognition'), ('publication', 'Publication'), ('patent', 'Patent'), ('grant', 'Grant'), ('general', 'General Achievement')], default='general', help_text='Type of achievement', max_length=20)),
                ('organization', models.CharField(blank=True, help_text='Organization that granted the achievement', max_length=200)),
                ('date_received', models.CharField(blank=True, help_text='Date when the achievement was received', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Description of the achievement and its significance')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User achievements',
                'ordering': ['-date_received', 'title'],
            },
        ),
        migrations.CreateModel(
            name='UserCertification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Certification name or title', max_length=200)),
                ('issuer', models.CharField(blank=True, help_text='Organization that issued the certification', max_length=200)),
                ('date_earned', models.CharField(blank=True, help_text='Date when the certification was earned', max_length=50)),
                ('expiration_date', models.CharField(blank=True, help_text='Expiration date (if applicable)', max_length=50)),
                ('credential_id', models.CharField(blank=True, help_text='Certification number or credential ID', max_length=100)),
                ('credential_url', models.URLField(blank=True, help_text='URL to verify the certification')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User certifications',
                'ordering': ['-date_earned', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserEducation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution', models.CharField(help_text='School, college, or university name', max_length=200)),
                ('degree', models.CharField(help_text='Degree or certificate earned', max_length=200)),
                ('field_of_study', models.CharField(blank=True, help_text='Major or field of study', max_length=200)),
                ('graduation_date', models.CharField(blank=True, help_text='Date or year of graduation', max_length=50)),
                ('gpa', models.CharField(blank=True, help_text='GPA or academic performance metric', max_length=10)),
                ('additional_info', models.TextField(blank=True, help_text='Additional information, honors, activities, etc.')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User education',
                'ordering': ['-graduation_date', 'institution'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, help_text="User's profile picture", null=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True, help_text='Professional summary and background')),
                ('linkedin_profile', models.URLField(blank=True, help_text='LinkedIn profile URL')),
                ('github_profile', models.URLField(blank=True, help_text='GitHub profile URL')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
